__version__ = (1, 3)
# meta developer: @hlnmhikka
print('KomaruPro 1.3 —Ç–æ–∂–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–Ω–æ–≥–æ –≤—Å—è–∫–∏—Ö –±–∞–≥–æ–≤... –†–µ–ø–æ—Ä—Ç–∏—Ç–µ –∏—Ö –≤ @hlnmhikka!')


from random import choice, randint

from telethon.tl.types import (
    InputMessagesFilterGif,
    InputMessagesFilterPhotos,
    InputMessagesFilterVideo,
    Message,
)

from .. import loader, utils

def selectchannel(confeg):
    if confeg == 'random':
        return choice(['komarueveryday', 'komaru_gif', 'komaru'])
    elif confeg != 'random':
        return confeg

class KomaruPro(loader.Module):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –º–µ–¥–∏–∞ —Å –ö–æ–º–∞—Ä—É, –ö–æ–∫–æ–∞ –∏–ª–∏ –ö–æ–º—É–≥–∏ –∏–∑ @komarueveryday, @komaru_gif –∏ @komaru. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è –≤ .config"""

    strings = {
        "name": "KomaruPro",
        "choosing": "<b><emoji document_id=5188311512791393083>üîé</emoji> –í—ã–±–∏—Ä–∞–µ–º {}...</b>",
        "gif": "GIF'–∫—É",
        "video": "–≤–∏–¥–µ–æ",
        "photo": "–∫–∞—Ä—Ç–∏–Ω–∫—É",
        "_cfg_doc_media_source": "–ö–∞–Ω–∞–ª, –æ—Ç–∫—É–¥–∞ –º–æ–¥—É–ª—å –±—É–¥–µ—Ç –±—Ä–∞—Ç—å –º–µ–¥–∏–∞, –∑–Ω–∞—á–µ–Ω–∏–µ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ë–ï–ó @. –ï—Å–ª–∏ —É –≤–∞—Å –≤–º–µ—Å—Ç–æ –º–µ–¥–∏–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∫–∏–¥–∞—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–µ –ø–∏–∫—á–∏ –∏–∑ –≤—Å–µ—Ö –≤–∞—à–∏—Ö —á–∞—Ç–æ–≤ - —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º",
        "_cfg_doc_contain_text": "–ù—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å—å?"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "media_source",
                'random',
                lambda: self.strings("_cfg_doc_media_source"),
                validator=loader.validators.String(),
            ),
            loader.ConfigValue(
                "contain_text",
                False,
                lambda: self.strings("_cfg_doc_contain_text"),
                validator=loader.validators.Boolean()
            )
        )

    
    SEARCH_TYPES = {
        InputMessagesFilterGif: "gif",
        InputMessagesFilterPhotos: "photo",
        InputMessagesFilterVideo: "video",
    }

    @loader.command(ru_doc="- –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –º–µ–¥–∏–∞ —Å –ö–ö–ö")
    async def komarucmd(self, message: Message):
        """- –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –º–µ–¥–∏–∞ —Å –ö–ö–ö –∏–∑ @komarueveryday, @komaru_gif –∏–ª–∏ @komaru"""
        search_type = choice(
            [
                InputMessagesFilterGif,
                InputMessagesFilterPhotos,
                InputMessagesFilterVideo,
            ]
        )
        search_type_str = self.strings(self.SEARCH_TYPES[search_type])

        msg = await utils.answer(
            message, self.strings("choosing").format(search_type_str)
        )

        chosed_msg = choice(
            [
                message_in_channel
                async for message_in_channel in self.client.iter_messages(
                    selectchannel(self.config["media_source"]), limit=200, filter=search_type
                )
            ]
        )

        reply = await message.get_reply_message()
        if reply:
            reply = reply.id
        else:
            reply = None
        if self.config["contain_text"]==False:
            return await utils.answer_file(
                msg,
                chosed_msg,
                reply_to=reply,
            )
        else:
            return await utils.answer_file(
                msg,
                chosed_msg,
                chosed_msg.text or "",
                reply_to=reply,
            )

    async def kmrgifcmd(self, message: Message):
        """- –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –≥–∏—Ñ —Å –ö–ö–ö"""
        search_type = InputMessagesFilterGif
        search_type_str = self.strings(self.SEARCH_TYPES[search_type])

        msg = await utils.answer(
            message, self.strings("choosing").format(search_type_str)
        )

        chosed_msg = choice(
            [
                message_in_channel
                async for message_in_channel in self.client.iter_messages(
                    selectchannel(self.config["media_source"]), limit=200, filter=search_type
                )
            ]
        )

        reply = await message.get_reply_message()
        if reply:
            reply = reply.id
        else:
            reply = None
        if self.config["contain_text"]==False:
            return await utils.answer_file(
                msg,
                chosed_msg,
                reply_to=reply,
            )
        else:
            return await utils.answer_file(
                msg,
                chosed_msg,
                chosed_msg.text or "",
                reply_to=reply,
            )

    async def kmrvidcmd(self, message: Message):
        """- –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –≤–∏–¥–µ–æ —Å –ö–ö–ö"""
        search_type = InputMessagesFilterVideo
        search_type_str = self.strings(self.SEARCH_TYPES[search_type])

        msg = await utils.answer(
            message, self.strings("choosing").format(search_type_str)
        )

        chosed_msg = choice(
            [
                message_in_channel
                async for message_in_channel in self.client.iter_messages(
                    selectchannel(self.config["media_source"]), limit=200, filter=search_type
                )
            ]
        )

        reply = await message.get_reply_message()
        if reply:
            reply = reply.id
        else:
            reply = None
        if self.config["contain_text"]==False:
            return await utils.answer_file(
                msg,
                chosed_msg,
                reply_to=reply,
            )
        else:
            return await utils.answer_file(
                msg,
                chosed_msg,
                chosed_msg.text or "",
                reply_to=reply,
            )

    async def kmrpiccmd(self, message: Message):
        """- –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ö–ö–ö"""
        search_type = InputMessagesFilterPhotos
        search_type_str = self.strings(self.SEARCH_TYPES[search_type])

        msg = await utils.answer(
            message, self.strings("choosing").format(search_type_str)
        )

        chosed_msg = choice(
            [
                message_in_channel
                async for message_in_channel in self.client.iter_messages(
                    selectchannel(self.config["media_source"]), limit=200, filter=search_type
                )
            ]
        )

        reply = await message.get_reply_message()
        if reply:
            reply = reply.id
        else:
            reply = None
        if self.config["contain_text"]==False:
            return await utils.answer_file(
                msg,
                chosed_msg,
                reply_to=reply,
            )
        else:
            return await utils.answer_file(
                msg,
                chosed_msg,
                chosed_msg.text or "",
                reply_to=reply,
            )
